pipeline {
    agent any

    environment {
        DOCKER_REGISTRY_URL = "${params.harbor_url}"
        HARBOR_CREDENTIAL = "${params.harbor_credential}"
        GIT_USER_EMAIL = "${params.git_user_email}"
        GIT_CREDENTIAL = "${params.github_credential}"
        DISCORD_WEBHOOK = credentials("MANNAZU-DISCORD_WEBHOOK")
    }

    tools {
        nodejs 'NodeJS-22.4.0' // Next.js 14.2.4와 호환되는 Node.js 버전으로 변경
    }

    stages {
        stage('의존성 설치') {
            steps {
                script {
                    // Discord 빌드 시작 메시지 보내기
                    discordSend title: "Mannazu-nextjs", 
                                description: "빌드 시작!!",
                                link: env.BUILD_URL, result: currentBuild.currentResult, 
                                webhookURL: env.DISCORD_WEBHOOK

                    // package.json의 해시 계산
                    def hashFile = '.deps-hash'
                    def currentHash = sh(script: "md5sum package.json | sort | md5sum | cut -d' ' -f1", returnStdout: true).trim()
                    def previousHash = ""
                    
                    if (fileExists(hashFile)) {
                        previousHash = readFile(hashFile).trim()
                    }

                    if (currentHash != previousHash || !fileExists('node_modules')) {
                        echo 'package.json 이 변경되었거나 node_modules가 없습니다. 의존성을 새로 설치합니다.'
                        sh 'rm -rf node_modules'
                        sh 'npm install -g pnpm'
                        sh 'pnpm install'
                        writeFile file: hashFile, text: currentHash
                    } else {
                        echo '변경 없음. 기존 node_modules를 사용합니다.'
                    }
                }
            }
        }

        stage('빌드') {
            steps {
                script {
                    echo '빌드 시작...'
                    sh 'pnpm run build' // Next.js 빌드 실행
                }
            }
        }


        stage('도커 이미지 빌드') {
            steps {
                script {
                    sh "ls -la"
                    docker.withRegistry("http://${DOCKER_REGISTRY_URL}", "${HARBOR_CREDENTIAL}") {
                        def customImage = docker.build("mannazo/mannazu-nextjs:${env.BUILD_NUMBER}", "-f CICD/Dockerfile .")
                        customImage.push()
                    }
                }
            }
        }

        stage('mannazo-web 업데이트') {
            steps {
                script { 
                    def manifestsRepoUrl = 'https://github.com/mannazo/mannazo-deploy.git'
                    def manifestsRepoBranch = 'main'
                    
                    git credentialsId: "${HARBOR_CREDENTIAL}", url: manifestsRepoUrl, branch: manifestsRepoBranch
                    sh """
                        git pull origin main
                        sed -i 's|harbor.dorong9.com/mannazo/mannazu-nextjs:.*|harbor.dorong9.com/mannazo/mannazu-nextjs:${env.BUILD_NUMBER}|' web/mannazu-web.yaml
                        git add web/mannazu-web.yaml
                        git config user.name 'DOLONG9'
                        git config user.email "${GIT_USER_EMAIL}"
                        git commit -m "web/mannazu-web.yaml ${currentBuild.number} image versioning"
                    """
                    withCredentials([gitUsernamePassword(credentialsId: "${GIT_CREDENTIAL}")]) {
                        sh "git remote set-url origin https://github.com/mannazo/mannazo-deploy.git" 
                        sh "git push origin main"
                    }
                }
            }
        }
    }

    post {
        success {
            discordSend title: "Mannazu-nextjs 빌드", 
                        description: "빌드 성공!!",            
                        footer: "Jenkins 에서 확인하세요", 
                        link: env.BUILD_URL, result: currentBuild.currentResult, 
                        webhookURL: env.DISCORD_WEBHOOK
            script {
                // Docker 이미지 삭제
                sh "docker rmi mannazo/mannazu-nextjs:${env.BUILD_NUMBER}"
                sh "docker rmi ${DOCKER_REGISTRY_URL}/mannazo/mannazu-nextjs:${env.BUILD_NUMBER}"
            }                        
        }
        failure {
            script {
                discordSend title: "Mannazu-auth-service", 
                            description: "빌드 실패!!",
                            footer: "젠킨스에서 확인하세요", 
                            link: env.BUILD_URL, result: currentBuild.currentResult, 
                            webhookURL: env.DISCORD_WEBHOOK
            }
        }
        always {
            echo 'Workspace 정리..'
            // node_modules와 package.json, pnpm-lock.yaml을 제외한 모든 파일 삭제
            sh '''
            find . -maxdepth 1 ! -name '.' ! -name 'node_modules' ! -name 'package.json' ! -name 'pnpm-lock.yaml' ! -name '.deps-hash' -exec rm -rf {} +
            '''
        }
    }
}