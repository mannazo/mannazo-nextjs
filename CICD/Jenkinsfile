pipeline {
    agent any

    environment {
        DOCKER_REGISTRY_URL = "${params.harbor_url}"
        HARBOR_CREDENTIAL = "${params.harbor_credential}"
        GIT_USER_EMAIL = "${params.git_user_email}"
        GIT_CREDENTIAL = "${params.github_credential}"
        DISCORD_WEBHOOK = credentials("MANNAZU-DISCORD_WEBHOOK")
    }

    tools {
        nodejs 'NodeJS-21.4.0' // Next.js 14.2.4와 호환되는 Node.js 버전으로 변경
    }

    stages {
        stage('.env.local 추가') {
            steps {
                script {
                    if (params.BUILD_FILE) {
                        writeFile file: '.env.local', text: readFile(params.BUILD_FILE)
                    }
                }
            }
        }

        stage('의존성 설치') {
            steps {
                script {
                    def nodeModulesExists = fileExists('node_modules')
                    def packageJsonChanged = false

                    if (nodeModulesExists) {
                        // 현재 package.json과 node_modules 내의 .package-json.md5 비교
                        def currentMd5 = sh(script: "md5sum package.json | cut -d' ' -f1", returnStdout: true).trim()
                        def previousMd5 = sh(script: "cat node_modules/.package-json.md5 2>/dev/null || echo ''", returnStdout: true).trim()
                        packageJsonChanged = (currentMd5 != previousMd5)
                    }

                    if (!nodeModulesExists || packageJsonChanged) {
                        echo 'node_modules가 없거나 package.json이 변경되었습니다. 의존성을 설치합니다.'
                        sh 'pnpm install'
                        // 새로운 package.json의 md5 저장
                        sh 'md5sum package.json | cut -d" " -f1 > node_modules/.package-json.md5'
                    } else {
                        echo '기존 node_modules를 사용합니다.'
                    }
                }
            }
        }

        stage('mannazu-nextjs 이미지 빌드') {
            steps {
                script {
                    sh "ls -la"
                    docker.withRegistry("http://${DOCKER_REGISTRY_URL}", "${HARBOR_CREDENTIAL}") {
                        def customImage = docker.build("mannazo/mannazu-nextjs:${env.BUILD_NUMBER}", "-f CICD/Dockerfile .")
                        customImage.push()
                    }
                }
            }
        }

        stage('mannazo-web 업데이트') {
            steps {
                script { 
                    def manifestsRepoUrl = 'https://github.com/mannazo/mannazo-deploy.git'
                    def manifestsRepoBranch = 'main'
                    
                    git credentialsId: "${HARBOR_CREDENTIAL}", url: manifestsRepoUrl, branch: manifestsRepoBranch
                    sh """
                        git pull origin main
                        sed -i 's|harbor.dorong9.com/mannazo/mannazu-nextjs:.*|harbor.dorong9.com/mannazo/mannazu-nextjs:${env.BUILD_NUMBER}|' web/mannazu-web.yaml
                        git add web/mannazu-web.yaml
                        git config user.name 'DOLONG9'
                        git config user.email "${GIT_USER_EMAIL}"
                        git commit -m "web/mannazu-web.yaml ${currentBuild.number} image versioning"
                    """
                    withCredentials([gitUsernamePassword(credentialsId: "${GIT_CREDENTIAL}")]) {
                        sh "git remote set-url origin https://github.com/mannazo/mannazo-deploy.git" 
                        sh "git push origin main"
                    }
                }
            }
        }
    }

    post {
        success {
            discordSend title: "Mannazu-nextjs 빌드", 
                        description: "빌드 성공!!",            
                        footer: "Jenkins 에서 확인하세요", 
                        link: env.BUILD_URL, result: currentBuild.currentResult, 
                        webhookURL: env.DISCORD_WEBHOOK
            script {
                // Docker 이미지 삭제
                sh "docker rmi mannazo/mannazu-nextjs:${env.BUILD_NUMBER}"
                sh "docker rmi ${DOCKER_REGISTRY_URL}/mannazo/mannazu-nextjs:${env.BUILD_NUMBER}"
            }                        
        }
        failure {
            discordSend title: "Mannazu-nextjs 빌드", 
                        description: "빌드 실패!!",
                        footer: "Jenkins 에서 확인하세요", 
                        link: env.BUILD_URL, result: currentBuild.currentResult, 
                        webhookURL: env.DISCORD_WEBHOOK
        }
        always {
            echo 'Workspace 정리..'
            // 빌드 결과물만 정리하고 node_modules는 유지
            sh 'rm -rf .next .env.local'
        }
    }
}
